if (length(network_cluster_size[network_cluster_size >=
minModule]) == 0) {
stop(
"The size of all subnetworks in the inputted network are less than ",minModule,". Please adjust the parameter 'minModule'!\n\n"
)
}
if (length(network_cluster_size) >= 2 &
sort(network_cluster_size, decreasing = T)[2] > minModule)
return(list(sig = 1, pval = NA))
network_cluster_size <-
data.frame(
id = c(1:length(network_cluster_size)),cluster_size = network_cluster_size,stringsAsFactors =
F
)
network_cluster_size <-
network_cluster_size[order(network_cluster_size[,2], decreasing = T),]
network_cluster_membership <-
network_cluster$membership
subnetwork_id <- 1
for (i in c(1:nrow(network_cluster_size))) {
sub_network_size <- network_cluster_size[i,2]
if (sub_network_size >= minModule) {
cat("Start to analysis subnetwork ",subnetwork_id,"!\n")
subnetwork_id <- subnetwork_id + 1
subnetwork_node <-
overlap_cell_networkP[which(network_cluster_membership == network_cluster_size[i,1])]
subnetwork <-
induced.subgraph(network,subnetwork_node)
network_info <-
evaluateWalktrapStep(subnetwork,maxStep,level = 1)
if(length(unique(network_info$walktrap$membership)) == 1){
sig <- 0
pval <- NA
}
else{
network_sig <-identifySig(network_info,permuteNum, pThr, weight = weight)
sig <- network_sig$sig
pval <- network_sig$pval
}
return(list(sig = sig, pval = pval, networkInfo = network_info))
}
}
}
evaluateWalktrapStep <- function(network_igraph,maxStep,level) {
#evaluate the optimal Step for the network
network_info <- list()
network_walktrap <- walktrap.community(network_igraph,steps = 2)
modularityMax <- max(network_walktrap$modularity)
optimalwalktrap <- network_walktrap
optimalStep <- 2
for (i in c(3:maxStep)) {
network_walktrap <- walktrap.community(network_igraph, weights =  E(network_igraph)$weight, steps = i)
network_modularity <- max(network_walktrap$modularity)
#cat("Modularity:",network_modularity,"\n")
if (network_modularity > modularityMax) {
optimalwalktrap <- network_walktrap
optimalStep <- i
modularityMax <- network_modularity
}
}
maxWalktrap <-
list(
walktrap = optimalwalktrap,step = optimalStep,network = network_igraph,level =
level
)
return(maxWalktrap)
}
identifySig <-
function(network_info,permuteNum, pThr, weight) {
#identify whether the network can be separated again
network_walktrap <- network_info$walktrap
network_modularity <- max(network_walktrap$modularity)
network_igraph <- network_info$network
degree <- igraph:::degree(network_igraph)
ranmodu <- vector()
step <- network_info$step
sig <- 0
for (i in c(1:permuteNum)) {
cat('The ', i, 'th ' ,'time', '\n')
suppressWarnings(rannet <-
degree.sequence.game(degree,method = "vl"))
ran_walktrap <- walktrap.community(rannet, weights = weight, steps = step)
ranModularity <- max(ran_walktrap$modularity)
ranmodu <- c(ranmodu,ranModularity)
}
p <- length(ranmodu[ranmodu >= network_modularity]) / permuteNum
if (p < pThr) {
sig <- 1
}
return(list(sig = sig, pval = p))
}
test <- idHetero(fullGraph, weight = weights)
test
test$sig
test$pval
cors <- cor(dataMat_sel, method = 'spearman')
weights <- cors[lower.tri(cors)]
quantile(weighted.mean())
quantile(weights
)
?cor
cors <- cor(dataMat_sel)
weights <- cors[lower.tri(cors)]
library('igraph')
library(LPCM)
library(NetSAM)
evaluateWalktrapStep
?walktrap.community
59/(1.68)^2
63.5/(1.68)^2
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
dataMat <- read.delim('Desktop/TestData/scRNAseq/GSE57872/GSE57872_GBM_data_matrix.txt', row.names = 1)
dataMat_sel <- dataMat[,1:430]
fullGraph <- t(combn(ncol(dataMat_sel), 2))
cors <- cor(dataMat_sel)
weights <- cors[lower.tri(cors)]
test <- idHetero(fullGraph, weight = weights)
test
quantile(cors)
cors <- cors[lower.tri(cors)]
fullGraphSel <- fullGraph[cors > quantile(cors)[4]]
head(fullGraph)
fullGraphSel <- fullGraph[cors > quantile(cors)[4],]
head(fullGraphSel)
dim(fullGraph)
test1 <- idHetero(fullGraphSel)
test1$sig
test1$pval
plot(graph.edgelist(fullGraphSel, directed = F))
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
?box
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
update.packages()
update.packages(ask = F
)
library(BiocInstaller)
biocLite()
sessionInfo()
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
warnings()
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
?colorRampPalette
library(fpc)
?pamk
library(mice)
?mice
?complete
?mice
shiny::runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
dataMat <- read.delim('Desktop/TestData/scRNAseq/test.txt', row.names = 1)
cors <- cor(dataMat)
quantile(cors[lower.tri(cores)])
quantile(cors[lower.tri(cors)])
?withProgress
library(LPCM)
?ms.self.coverage
temp <- pcaplot(as.matrix(dataMat_sel), method = 'pca', color = colF, text = F)
source('Dropbox/gitrepository/Some useful scripts/R/pca3d.r')
temp <- pcaplot(as.matrix(dataMat_sel), method = 'pca', color = colF, text = F)
colF <- rep(c(1,2,3,4,5), times = c(118, 94, 75, 73, 70))
temp <- pcaplot(as.matrix(dataMat_sel), method = 'pca', color = colF, text = F)
foo <-
ms.self.coverage(temp[[1]], taumin = 0.01, taumax = 1, gridsize = 100)
?plot
h <- select.self.coverage(foo)$select[1]
test1 <- ms(temp[[1]], iter = 1000, plotms = 1)
test1$cluster.center
test1 <- ms(temp[[1]], iter = 1000, plotms = 2)
test1 <- ms(temp[[1]], iter = 1000, plotms = 3)
test1 <- ms(temp[[1]], iter = 1000, plotms = 3)
test1 <- ms(temp[[1]], iter = 1000, plotms = 4)
test1 <- ms(temp[[1]], iter = 1000, plotms = 0)
test1 <- ms(temp[[1]], iter = 1000, plotms = 0)
test1$cluster.label
?order
20*0.15
?quantile
?density
dataMat <- read.delim('Desktop/TestData/scRNAseq/GSE57872/GSE57872_GBM_data_matrix.txt')
dataMat[1:5,1:5]
dataMat <- read.delim('Desktop/TestData/scRNAseq/GSE57872/GSE57872_GBM_data_matrix.txt', row.names = 1)
dataMat[1:5,1:5]
dataMat <- 2^dataMat
dataMat[1:5,1:5]
quantile(dataMat)
write.table('Desktop/TestData/scRNAseq/GSE57872/data2square.txt', sep = '\t', row.names = T, col.names = T, quote = F)
write.table(dataMat, 'Desktop/TestData/scRNAseq/GSE57872/data2square.txt', sep = '\t', row.names = T, col.names = T, quote = F)
library(edgeR)
binomTest(c(0,5,10),c(0,30,50),n1=10000,n2=15000)
#  Univariate equivalents:
binom.test(5,5+30,p=10000/(10000+15000))$p.value
binom.test(10,10+50,p=10000/(10000+15000))$p.value
library(edgeR)
?"DGEList"
?log
lib.size <- c(2,4,8)
e
lib.size <- c(exp(2),exp(4),exp(8))
lib.size <- c(exp(1),exp(2),exp(3))
lib.size
offset <- log(lib.size)
lib.size.average <- exp(mean(offset))
mean(lib.size)
prod(lib.size)
prod(lib.size)^(1/3)
prod(lib.size)/e^(1/3)
prod(lib.size)/exp(3)
exp(3)
?prod
exp(6)/exp(3)
?glm.fit
?exactTest
y <- matrix(rnbinom(80,size=1/0.2,mu=10),nrow=20,ncol=4)
d <- DGEList(counts=y, group=c(1,1,2,2), lib.size=rep(1000,4))
head(y)
debug(exactTest)
de <- exactTest(d, dispersion=0.2)
de <- exactTest(d, dispersion=0.2)
d <- DGEList(counts=y, group=c(1,1,2,2))
de <- exactTest(d, dispersion=0.2)
library(edgeR)
y <- matrix(rnbinom(80,size=1/0.2,mu=10),nrow=20,ncol=4)
d <- DGEList(counts=y, group=c(1,1,2,2))
head(y)
de <- exactTest(d, dispersion=0.2, big.count = 20, rejection.region = "doubletail")
debug(de)
debug(exactTest)
de <- exactTest(d, dispersion=0.2, big.count = 20, rejection.region = "doubletail")
de <- exactTest(d, dispersion=0.2, big.count = 20, rejection.region = "doubletail")
big
57.8/4
all.zero
?qbeta
plot(seq(0, 1, 0.01), qbeta(seq(0, 1, 0.01), alpha1[!all.zero], alpha2[!all.zero]))
left
pvals
qbeta(0.5, 1,1)
qbeta(0.5, 100,100)
plot(seq(0, 1, 0.01), qbeta(seq(0, 1, 0.01), alpha1*2[!all.zero], alpha2*2[!all.zero]))
undebug(exactTest)
de <- exactTest(d, dispersion=0.2, big.count = 20, rejection.region = "doubletail")
str(de)
?"DGEExact-class"
de[[1]]
de <- exactTest(d, dispersion=0.2, big.count = 0, rejection.region = "doubletail")
de[[1]]
head(y)
which(apply(y[,1:2], 1, sum) > 20 & apply(y[,3:4], 1, sum) > 20)
de <- exactTest(d, dispersion=0.2, big.count = 20, rejection.region = "doubletail")
de[[1]]
de <- exactTest(d, dispersion=0.2, big.count = 100, rejection.region = "doubletail")
de[[1]]
library(roar)
library(BiocInstaller)
biocLite('roar')
library(roar)
library(rtracklayer)
library(RNAseqData.HNRNPC.bam.chr14)
biocLite('RNAseqData.HNRNPC.bam.chr14')
library(RNAseqData.HNRNPC.bam.chr14)
gtf <- system.file("examples", "apa.gtf", package="roar")
gtf
bamTreatment <- RNAseqData.HNRNPC.bam.chr14_BAMFILES[seq(5,8)]
bamControl <- RNAseqData.HNRNPC.bam.chr14_BAMFILES[seq(1,3)]
rds <- RoarDatasetFromFiles(bamTreatment, bamControl, gtf)
str(rds)
?"RoarDataset-class"
rds <- countPrePost(rds, FALSE)
rds <- computeRoars(rds)
rds <- computePvals(rds)
results <- totalResults(rds)
head(results)
head(results, 20)
library(data.table)
gtfAnno <- fread(gtf)
gtfAnno <- fread(gtf, data.table = F)
head(gtfAnno)
gtfAnno <- gtfAnno[,c(9,1,4,5,7)]
head(gtfAnno)
biocLite('Rsubread')
library(Rsubread)
?featureCounts
featureCounts(files="mapping_results_SE.sam",annot.inbuilt="mm9")
str(RNAseqData.HNRNPC.bam.chr14_BAMFILES)
fc_SE <- featureCounts(bamTreatment,annot.ext=ann)
fc_SE <- featureCounts(bamTreatment,annot.ext=gtfAnno)
head(gtfAnno)
str(gtfAnno)
colnames(gtfAnno) <- c("GeneID", "Chr", "Start", "End", "Strand")
head(gtfAnno)
fc_SE <- featureCounts(bamTreatment,annot.ext=gtfAnno)
str(fcSE)
str(fc_SE)
str(fc_SE[[1]])
head(fc_SE[[1]])
fc_SE <- featureCounts(RNAseqData.HNRNPC.bam.chr14_BAMFILES[c(seq(1,3), seq(5,8))],annot.ext=gtfAnno)
rds <- RoarDatasetFromFiles(bamTreatment, bamControl, gtf)
t1 <- Sys.time()
rds <- RoarDatasetFromFiles(bamTreatment, bamControl, gtf)
t2 <- Sys.time()
t2 -t1
t1 <- Sys.time()
fc_SE <- featureCounts(RNAseqData.HNRNPC.bam.chr14_BAMFILES[c(seq(1,3), seq(5,8))],annot.ext=gtfAnno)
t2 <- Sys.time()
t2 -t1
head(gtf)
head(gtfAnno)
biocLite('InPAS')
library(InPAS)
library(BSgenome.Mmusculus.UCSC.mm10)
biocLite('BSgenome.Mmusculus.UCSC.mm10')
biocLite('TxDb.Mmusculus.UCSC.mm10.knownGene')
path <- file.path(find.package("InPAS"), "extdata")
suppressPackageStartupMessages(library(org.Hs.eg.db))
samplefile <- system.file("extdata", "hg19_knownGene_sample.sqlite",
package="GenomicFeatures")
txdb <- loadDb(samplefile)
utr3.sample.anno <- utr3Annotation(txdb=txdb,
orgDbSYMBOL="org.Hs.egSYMBOL")
str(utr3.sample.anno)
head(utr3.sample.anno)
dim(utr3.sample.anno)
?coverageFromBedGraph
?CPsites
CPsites()
CPsites
load(file.path(path, "polyA.rds"))
suppressPackageStartupMessages(library(cleanUpdTSeq))
data(classifier)
bedgraphs <- c(file.path(path, "Baf3.extract.bedgraph"),
file.path(path, "UM15.extract.bedgraph"))
hugeData <- FALSE
coverage <- coverageFromBedGraph(bedgraphs,
tags=c("Baf3", "UM15"),
genome=BSgenome.Mmusculus.UCSC.mm10,
hugeData=hugeData)
suppressPackageStartupMessages(library(BSgenome.Mmusculus.UCSC.mm10))
coverage <- coverageFromBedGraph(bedgraphs,
tags=c("Baf3", "UM15"),
genome=BSgenome.Mmusculus.UCSC.mm10,
hugeData=hugeData)
CPs <- CPsites(coverage=coverage,
genome=BSgenome.Mmusculus.UCSC.mm10,
utr3=utr3.mm10,
search_point_START=200,
cutEnd=.2,
long_coverage_threshold=3,
background="10K",
txdb=TxDb.Mmusculus.UCSC.mm10.knownGene,
PolyA_PWM=pwm,
classifier=classifier,
shift_range=50)
data(utr3.mm10)
load(file.path(path, "polyA.rds"))
CPs <- CPsites(coverage=coverage,
genome=BSgenome.Mmusculus.UCSC.mm10,
utr3=utr3.mm10,
search_point_START=200,
cutEnd=.2,
long_coverage_threshold=3,
background="10K",
txdb=TxDb.Mmusculus.UCSC.mm10.knownGene,
PolyA_PWM=pwm,
classifier=classifier,
shift_range=50)
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
CPs <- CPsites(coverage=coverage,
genome=BSgenome.Mmusculus.UCSC.mm10,
utr3=utr3.mm10,
search_point_START=200,
cutEnd=.2,
long_coverage_threshold=3,
background="10K",
txdb=TxDb.Mmusculus.UCSC.mm10.knownGene,
PolyA_PWM=pwm,
classifier=classifier,
shift_range=50)
res <- testUsage(CPsites=CPs,
coverage=coverage,
genome=BSgenome.Mmusculus.UCSC.mm10,
utr3=utr3.mm10,
method="fisher.exact",
gp1="Baf3", gp2="UM15")
as(res, "GRanges")
head(utr3.mm10)
dim(utr3.mm10)
?GRanges
length(utr3.mm10)
data("utr3.hg19")
length(utr3.hg19)
?computeRoars
head(gtfAnno)
tail(gtfAnno)
dim(gtfAnno)
117*0.6/(1.68)^2
0.23*26
24.87245 + 5.98 - 5.4 - 10.8
library(roar)
library(rtracklayer)
library(RNAseqData.HNRNPC.bam.chr14)
gtf <- system.file("examples", "apa.gtf", package="roar")
library("biomaRt")
listMarts()
library(BiocInstaller)
biocLite("TCGAbiolinks")
library(TCGAbiolinks)
?"TCGAquery"
query <- TCGAquery(tumor = c("LIHC"), level = 3,
platform = c("IlluminaHiSeq_RNASeqV2")
)
str(query)
query
str(query)
LIHC_RNASeqV2_version <- TCGAquery_Version(tumor = "lihc",
platform = "illuminahiseq_rnaseqv2")
str(LIHC_RNASeqV2_version)
LIHC_RNASeqV2_version
LIHC_RNASeqV2_version[,1:4]
?"TCGAdownload"
TCGAdownload(query, path = "Downloads/", type = "rsem.genes.results")
2544/6
LIHC_RNASeqV2_version <- TCGAquery_Version(tumor = "lihc",
platform = "illuminahiseq_rnaseqv2")
str(LIHC_RNASeqV2_version)
inforTable <- fread('Downloads/unc.edu_LIHC.IlluminaHiSeq_RNASeqV2.1.15.0.sdrf.txt', data.table = F)
library(data.table)
inforTable <- fread('Downloads/unc.edu_LIHC.IlluminaHiSeq_RNASeqV2.1.15.0.sdrf.txt', data.table = F)
str(inforTable)
library(data.table)
?substr
library(edgeR)
?"edgeR-package"
?estimateCommonDisp
?calcNormFactors
library(shinyapps)
library(shiny)
runApp('Dropbox/gitrepository/bringd32biology/RNA-seq/', launch.browser = T)
library(XBSeq)
data(ExampleData)
source('C:/Users/Yaol/Desktop/R-software for looking for DNA samples/input/function.txt')
source('Downloads//function.txt')
Itemlist<-read.table('Downloads/itemlist.csv',sep=',')
Sampletable_SAFD1<-read.table('Downloads/SAFD-DNA from 15ml tube.csv',sep=',',header=T)
Matchedresults_SAFD1<-findsymbol(Itemlist,Sampletable_SAFD1)
write.table(Matchedresults_SAFD1,'Downloads/SAFD-DNA from 15ml tube.csv',sep=',')
Sampletable_SAFD2 <-read.table('Downloads/SAFD-DNA from transformed.csv',sep=',',header=T)
Matchedresults_SAFD2 <- findsymbol(Itemlist,Sampletable_SAFD2)
write.table(Matchedresults_SAFD2, 'Downloads/SAFD-DNA from transformed.csv',sep=',')
Sampletable_SAFD3 <-read.table('Downloads/SAFD-DNA not genotyped.csv',sep=',',header=T)
Matchedresults_SAFD3 <- findsymbol(Itemlist,Sampletable_SAFD3)
write.table(Matchedresults_SAFD3, 'Downloads/SAFD-DNA not genotyped.csv',sep=',')
Sampletable_SAFD4 <-read.table('Downloads/SAFD-DNA Re family.csv',sep=',',header=T)
Matchedresults_SAFD4 <- findsymbol(Itemlist,Sampletable_SAFD4)
write.table(Matchedresults_SAFD4, 'Downloads/SAFD-DNA Re family.csv',sep=',')
uniqueIDs <- Reduce(union, list(a = Matchedresults_SAFD1$sample.name, b = Matchedresults_SAFD2$sample.name, c= Matchedresults_SAFD3$sample.name, d = Matchedresults_SAFD4$sample.name))
write.table(Itemlist$V1[!Itemlist$V1 %in% uniqueIDs], 'Downloads/SamplesNotFound.csv', sep=',')
library(roar)
library(RNAseqData.HNRNPC.bam.chr14)
bamTreatment <- RNAseqData.HNRNPC.bam.chr14_BAMFILES[seq(5,8)]
bamControl <- RNAseqData.HNRNPC.bam.chr14_BAMFILES[seq(1,3)]
rds <- RoarDatasetFromFiles(bamTreatment, bamControl, 'Dropbox/gitrepository/XBSeq_files/APAannotation/hg38_apa.gtf')
setwd('Dropbox/gitrepository/XBSeq_files/APAannotation/')
temp <- read.table('hg38_apa.gtf', sep = '\t')
head(temp)
gtf <- system.file("examples", "apa.gtf", package="roar")
temp1 <- read.table(gtf, sep = '\t')
head(temp1)
temp1 <- readLines(gtf, sep = '\t')
temp1 <- readLines(gtf)
temp1[[1]]
library(rtracklayer)
temp2 <- import(gtf)
head(temp2)
temp2 <- import('hg38_apa.gtf')
head(temp)
head(temp1)
temp2 <- import('hg38_apa.gtf')
write.table(temp, 'hg38_apa.gtf', row.names = F, col.names = F, sep = '\t', quote =F)
temp2 <- import('hg38_apa.gtf')
head(temp2)
temp <- read.table('hg19_apa.gtf', sep = '\t')
head(temp)
write.table(temp, 'hg19_apa.gtf', row.names = F, col.names = F, sep = '\t', quote =F)
temp2 <- import('hg19_apa.gtf')
head(temp2)
temp2
temp <- read.table('mm9_apa.gtf', sep = '\t')
head(temp)
write.table(temp, 'mm9_apa.gtf', row.names = F, col.names = F, sep = '\t', quote =F)
temp2 <- import('mm9_apa.gtf')
head(temp2)
temp <- read.table('mm10_apa.gtf', sep = '\t')
write.table(temp, 'mm10_apa.gtf', row.names = F, col.names = F, sep = '\t', quote =F)
temp2 <- import('mm9_apa.gtf')
temp2 <- import('mm10_apa.gtf')
head(temp2)
rds <- RoarDatasetFromFiles(bamTreatment, bamControl, 'Dropbox/gitrepository/XBSeq_files/APAannotation/hg38_apa.gtf')
rds <- RoarDatasetFromFiles(bamTreatment, bamControl, 'hg19_apa.gtf')
